let horizontal_spacing;
let vertical_spacing;
let solution_positions = [
  [
    // Line 1
    ["0", "0", "3", "3"],
    ["0", "0", "4", "4"],
    ["1", "2", " ", " "],
    ["7", "8", "5", "5"],
    ["7", "8", "6", "6"],
  ],
  [
    ["0", "0", "3", "3"],
    ["0", "0", "4", "4"],
    ["1", " ", " ", "2"],
    ["7", "8", "5", "5"],
    ["7", "8", "6", "6"],
  ],
  [
    ["0", "0", "3", "3"],
    ["0", "0", "4", "4"],
    [" ", " ", "1", "2"],
    ["7", "8", "5", "5"],
    ["7", "8", "6", "6"],
  ],
  [
    [" ", " ", "3", "3"],
    ["0", "0", "4", "4"],
    ["0", "0", "1", "2"],
    ["7", "8", "5", "5"],
    ["7", "8", "6", "6"],
  ],
  [
    ["3", "3", " ", " "],
    ["0", "0", "4", "4"],
    ["0", "0", "1", "2"],
    ["7", "8", "5", "5"],
    ["7", "8", "6", "6"],
  ],
  [
    ["3", "3", "4", "4"],
    ["0", "0", " ", " "],
    ["0", "0", "1", "2"],
    ["7", "8", "5", "5"],
    ["7", "8", "6", "6"],
  ],
  [
    ["3", "3", "4", "4"],
    ["0", "0", "1", " "],
    ["0", "0", " ", "2"],
    ["7", "8", "5", "5"],
    ["7", "8", "6", "6"],
  ],
  [
    ["3", "3", "4", "4"],
    ["0", "0", " ", "1"],
    ["0", "0", " ", "2"],
    ["7", "8", "5", "5"],
    ["7", "8", "6", "6"],
  ],
  // Line 2
  [
    ["3", "3", "4", "4"],
    [" ", "0", "0", "1"],
    [" ", "0", "0", "2"],
    ["7", "8", "5", "5"],
    ["7", "8", "6", "6"],
  ],
  [
    ["3", "3", "4", "4"],
    ["7", "0", "0", "1"],
    ["7", "0", "0", "2"],
    [" ", "8", "5", "5"],
    [" ", "8", "6", "6"],
  ],
  [
    ["3", "3", "4", "4"],
    ["7", "0", "0", "1"],
    ["7", "0", "0", "2"],
    ["8", " ", "5", "5"],
    ["8", " ", "6", "6"],
  ],
  [
    ["3", "3", "4", "4"],
    ["7", "0", "0", "1"],
    ["7", "0", "0", "2"],
    ["8", "5", "5", " "],
    ["8", " ", "6", "6"],
  ],
  [
    ["3", "3", "4", "4"],
    ["7", "0", "0", "1"],
    ["7", "0", "0", "2"],
    ["8", "5", "5", " "],
    ["8", "6", "6", " "],
  ],
  [
    ["3", "3", "4", "4"],
    ["7", "0", "0", "1"],
    ["7", "0", "0", " "],
    ["8", "5", "5", " "],
    ["8", "6", "6", "2"],
  ],
  [
    ["3", "3", "4", "4"],
    ["7", "0", "0", " "],
    ["7", "0", "0", " "],
    ["8", "5", "5", "1"],
    ["8", "6", "6", "2"],
  ],
  [
    ["3", "3", "4", "4"],
    ["7", " ", "0", "0"],
    ["7", " ", "0", "0"],
    ["8", "5", "5", "1"],
    ["8", "6", "6", "2"],
  ],
  // Line 3
  [
    ["3", "3", "4", "4"],
    [" ", "7", "0", "0"],
    [" ", "7", "0", "0"],
    ["8", "5", "5", "1"],
    ["8", "6", "6", "2"],
  ],
  [
    ["3", "3", "4", "4"],
    ["8", "7", "0", "0"],
    ["8", "7", "0", "0"],
    [" ", "5", "5", "1"],
    [" ", "6", "6", "2"],
  ],
  [
    ["3", "3", "4", "4"],
    ["8", "7", "0", "0"],
    ["8", "7", "0", "0"],
    ["5", "5", " ", "1"],
    [" ", "6", "6", "2"],
  ],
  [
    ["3", "3", "4", "4"],
    ["8", "7", "0", "0"],
    ["8", "7", "0", "0"],
    ["5", "5", "1", " "],
    [" ", "6", "6", "2"],
  ],
  [
    ["3", "3", "4", "4"],
    ["8", "7", "0", "0"],
    ["8", "7", "0", "0"],
    ["5", "5", "1", "2"],
    [" ", "6", "6", " "],
  ],
  [
    ["3", "3", "4", "4"],
    ["8", "7", "0", "0"],
    ["8", "7", "0", "0"],
    ["5", "5", "1", "2"],
    [" ", " ", "6", "6"],
  ],
  [
    ["3", "3", "4", "4"],
    ["8", "7", "0", "0"],
    ["8", "7", "0", "0"],
    [" ", " ", "1", "2"],
    ["5", "5", "6", "6"],
  ],
  [
    ["3", "3", "4", "4"],
    ["8", "7", "0", "0"],
    ["8", "7", "0", "0"],
    ["1", " ", " ", "2"],
    ["5", "5", "6", "6"],
  ],
  // Line 4
  [
    ["3", "3", "4", "4"],
    ["8", "7", "0", "0"],
    ["8", "7", "0", "0"],
    ["1", "2", " ", " "],
    ["5", "5", "6", "6"],
  ],
  [
    ["3", "3", "4", "4"],
    ["8", "7", "0", "0"],
    ["8", "7", "0", "0"],
    ["1", "2", "6", "6"],
    ["5", "5", " ", " "],
  ],
  [
    ["3", "3", "4", "4"],
    ["8", "7", "0", "0"],
    ["8", "7", "0", "0"],
    ["1", "2", "6", "6"],
    [" ", " ", "5", "5"],
  ],
  [
    ["3", "3", "4", "4"],
    ["8", "7", "0", "0"],
    ["8", "7", "0", "0"],
    ["1", " ", "6", "6"],
    [" ", "2", "5", "5"],
  ],
  [
    ["3", "3", "4", "4"],
    ["8", "7", "0", "0"],
    ["8", "7", "0", "0"],
    ["1", " ", "6", "6"],
    ["2", " ", "5", "5"],
  ],
  [
    ["3", "3", "4", "4"],
    ["8", " ", "0", "0"],
    ["8", " ", "0", "0"],
    ["1", "7", "6", "6"],
    ["2", "7", "5", "5"],
  ],
  [
    ["3", "3", "4", "4"],
    [" ", "8", "0", "0"],
    [" ", "8", "0", "0"],
    ["1", "7", "6", "6"],
    ["2", "7", "5", "5"],
  ],
  [
    ["3", "3", "4", "4"],
    ["1", "8", "0", "0"],
    [" ", "8", "0", "0"],
    [" ", "7", "6", "6"],
    ["2", "7", "5", "5"],
  ],
  // Line 5
  [
    ["3", "3", "4", "4"],
    ["1", "8", "0", "0"],
    ["2", "8", "0", "0"],
    [" ", "7", "6", "6"],
    [" ", "7", "5", "5"],
  ], 
  [
    ["3", "3", "4", "4"],
    ["1", "8", "0", "0"],
    ["2", "8", "0", "0"],
    ["7", " ", "6", "6"],
    ["7", " ", "5", "5"],
  ], 
  [
    ["3", "3", "4", "4"],
    ["1", " ", "0", "0"],
    ["2", "8", "0", "0"],
    ["7", "8", "6", "6"],
    ["7", " ", "5", "5"],
  ], 
  [
    ["3", "3", "4", "4"],
    [" ", "1", "0", "0"],
    ["2", "8", "0", "0"],
    ["7", "8", "6", "6"],
    ["7", " ", "5", "5"],
  ], 
  [
    ["3", "3", "4", "4"],
    ["2", "1", "0", "0"],
    [" ", "8", "0", "0"],
    ["7", "8", "6", "6"],
    ["7", " ", "5", "5"],
  ], 
  [
    ["3", "3", "4", "4"],
    ["2", "1", "0", "0"],
    ["7", "8", "0", "0"],
    ["7", "8", "6", "6"],
    [" ", " ", "5", "5"],
  ], 
  [
    ["3", "3", "4", "4"],
    ["2", "1", "0", "0"],
    ["7", "8", "0", "0"],
    ["7", "8", "6", "6"],
    ["5", "5", " ", " "],
  ], 
  [
    ["3", "3", "4", "4"],
    ["2", "1", "0", "0"],
    ["7", "8", "0", "0"],
    ["7", "8", " ", " "],
    ["5", "5", "6", "6"],
  ], 
  // Line 6
  [
    ["3", "3", "4", "4"],
    ["2", "1", " ", " "],
    ["7", "8", "0", "0"],
    ["7", "8", "0", "0"],
    ["5", "5", "6", "6"],
  ], 
  [
    ["3", "3", "4", "4"],
    ["2", " ", " ", "1"],
    ["7", "8", "0", "0"],
    ["7", "8", "0", "0"],
    ["5", "5", "6", "6"],
  ], 
  [
    ["3", "3", "4", "4"],
    [" ", " ", "2", "1"],
    ["7", "8", "0", "0"],
    ["7", "8", "0", "0"],
    ["5", "5", "6", "6"],
  ],   
  [
    [" ", " ", "4", "4"],
    ["3", "3", "2", "1"],
    ["7", "8", "0", "0"],
    ["7", "8", "0", "0"],
    ["5", "5", "6", "6"],
  ],  
  [
    [" ", "4", "4", " "],
    ["3", "3", "2", "1"],
    ["7", "8", "0", "0"],
    ["7", "8", "0", "0"],
    ["5", "5", "6", "6"],
  ],  
  [
    [" ", "4", "4", "1"],
    ["3", "3", "2", " "],
    ["7", "8", "0", "0"],
    ["7", "8", "0", "0"],
    ["5", "5", "6", "6"],
  ],  
  [
    [" ", "4", "4", "1"],
    ["3", "3", " ", "2"],
    ["7", "8", "0", "0"],
    ["7", "8", "0", "0"],
    ["5", "5", "6", "6"],
  ],  
  [
    [" ", "4", "4", "1"],
    [" ", "3", "3", "2"],
    ["7", "8", "0", "0"],
    ["7", "8", "0", "0"],
    ["5", "5", "6", "6"],
  ],  
  // Line 7
  [
    ["7", "4", "4", "1"],
    ["7", "3", "3", "2"],
    [" ", "8", "0", "0"],
    [" ", "8", "0", "0"],
    ["5", "5", "6", "6"],
  ],    
  [
    ["7", "4", "4", "1"],
    ["7", "3", "3", "2"],
    ["8", " ", "0", "0"],
    ["8", " ", "0", "0"],
    ["5", "5", "6", "6"],
  ], 
  [
    ["7", "4", "4", "1"],
    ["7", "3", "3", "2"],
    ["8", "0", "0", " "],
    ["8", "0", "0", " "],
    ["5", "5", "6", "6"],
  ], 
  [
    ["7", "4", "4", "1"],
    ["7", "3", "3", " "],
    ["8", "0", "0", " "],
    ["8", "0", "0", "2"],
    ["5", "5", "6", "6"],
  ],  
  [
    ["7", "4", "4", " "],
    ["7", "3", "3", " "],
    ["8", "0", "0", "1"],
    ["8", "0", "0", "2"],
    ["5", "5", "6", "6"],
  ], 
  [
    ["7", " ", "4", "4"],
    ["7", "3", "3", " "],
    ["8", "0", "0", "1"],
    ["8", "0", "0", "2"],
    ["5", "5", "6", "6"],
  ], 
  [
    ["7", " ", "4", "4"],
    ["7", " ", "3", "3"],
    ["8", "0", "0", "1"],
    ["8", "0", "0", "2"],
    ["5", "5", "6", "6"],
  ], 
  [
    [" ", "7", "4", "4"],
    [" ", "7", "3", "3"],
    ["8", "0", "0", "1"],
    ["8", "0", "0", "2"],
    ["5", "5", "6", "6"],
  ], 
  // Line 8
  [
    ["8", "7", "4", "4"],
    ["8", "7", "3", "3"],
    [" ", "0", "0", "1"],
    [" ", "0", "0", "2"],
    ["5", "5", "6", "6"],
  ],   
  [
    ["8", "7", "4", "4"],
    ["8", "7", "3", "3"],
    ["0", "0", " ", "1"],
    ["0", "0", " ", "2"],
    ["5", "5", "6", "6"],
  ],   
  [
    ["8", "7", "4", "4"],
    ["8", "7", "3", "3"],
    ["0", "0", " ", "1"],
    ["0", "0", "2", " "],
    ["5", "5", "6", "6"],
  ],  
  [
    ["8", "7", "4", "4"],
    ["8", "7", "3", "3"],
    ["0", "0", "2", "1"],
    ["0", "0", " ", " "],
    ["5", "5", "6", "6"],
  ],  
  [
    ["8", "7", "4", "4"],
    ["8", "7", "3", "3"],
    ["0", "0", "2", "1"],
    ["0", "0", "6", "6"],
    ["5", "5", " ", " "],
  ],  
  [
    ["8", "7", "4", "4"],
    ["8", "7", "3", "3"],
    ["0", "0", "2", "1"],
    ["0", "0", "6", "6"],
    [" ", " ", "5", "5"],
  ],  
  [
    ["8", "7", "4", "4"],
    ["8", "7", "3", "3"],
    [" ", " ", "2", "1"],
    ["0", "0", "6", "6"],
    ["0", "0", "5", "5"],
  ],  
];

let puzzle_piece_color_array = new Array(9);
let current_move_position = 0

function setup() {
  // Setup canvas to comply to 4:5 ratio (width to height)
  createCanvas(400, 500);
  horizontal_spacing = width / 4.0;
  vertical_spacing = height / 5.0;
  //print_solution_position(solution_positions, 0)
  colorMode(HSB);
  for (let i = 0; i < 9; i++) {
    puzzle_piece_color_array[i] = color((i * 360) / 9, 255, 255);
  }
  // get_grid_position(solution_positions, 0, 6)
  frameRate(2)
  //saveGif('dad_puzzle', 35)
  frame_count = 0;
}

function draw() {
  background(255);
  draw_pieces(solution_positions, current_move_position)
  if (frame_count > 2) {
  current_move_position += 1
  if (current_move_position > 62) {
    current_move_position = 62
  }
  }
  else {
    frame_count += 1
  }
  
}

function print_solution_position(position_array, position) {
  let line_string = "";
  line_string += "----\n";
  for (let y = 0; y < position_array[position].length; y++) {
    for (let x = 0; x < position_array[position][0].length; x++) {
      //print(position_array[position][y][0])
      line_string += position_array[position][y][x];
      line_string += " "; // add space between elements
    }
    line_string += "\n";
  }
  line_string += "----";

  print(line_string);
}

function get_grid_position(position_array, position, piece_number) {
  let x_pos = null;
  let y_pos = null;
  for (let y = 0; y < position_array[position].length; y++) {
    for (let x = 0; x < position_array[position][0].length; x++) {
      if (
        position_array[position][y][x] == str(piece_number) &&
        x_pos == null &&
        y_pos == null
      ) {
        x_pos = x;
        y_pos = y;
      }
    }
  }
  return {x: x_pos, y: y_pos}
}

function draw_pieces(position_array, position) {
  noStroke()
  for(let i = 0; i < 9; i++) {
    fill(puzzle_piece_color_array[i])
    let current_piece_position = get_grid_position(position_array, position, i)
    let current_piece_x_size = 0
    let current_piece_y_size = 0
    if (i == 0) {
      current_piece_x_size = 2;
      current_piece_y_size = 2;
    }
    if (i == 1) {
      current_piece_x_size = 1;
      current_piece_y_size = 1;
    }
    if (i == 2) {
      current_piece_x_size = 1;
      current_piece_y_size = 1;
    }
    if (i == 3) {
      current_piece_x_size = 2;
      current_piece_y_size = 1;
    }
    if (i == 4) {
      current_piece_x_size = 2;
      current_piece_y_size = 1;
    }
    if (i == 5) {
      current_piece_x_size = 2;
      current_piece_y_size = 1;
    }
    if (i == 6) {
      current_piece_x_size = 2;
      current_piece_y_size = 1;
    }
    if (i == 7) {
      current_piece_x_size = 1;
      current_piece_y_size = 2;
    }
    if (i == 8) {
      current_piece_x_size = 1;
      current_piece_y_size = 2;
    }
    rect(current_piece_position.x * horizontal_spacing , current_piece_position.y * horizontal_spacing , current_piece_x_size * horizontal_spacing, current_piece_y_size * vertical_spacing)
  }
}

function keyPressed() {
  if (key == 'r' || key == 'R') {
    current_move_position = 0
  }
  else if (keyCode == LEFT_ARROW) {
    current_move_position -= 1
  }
  else if (keyCode == RIGHT_ARROW) {
    current_move_position += 1
  }
  
  if (current_move_position < 0) {
    current_move_position = 0
  }
  if (current_move_position > 62) {
    current_move_position = 62
  }
  print(current_move_position)
}
